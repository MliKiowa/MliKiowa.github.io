{"meta":{"title":"Village","subtitle":"Mlikiowa Village","description":"It is a little blog～","author":"Mlikiowa","url":"https://nanaeo.cn","root":"/"},"pages":[{"title":"","date":"2022-10-23T15:02:12.204Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"sw.js","permalink":"https://nanaeo.cn/sw.js","excerpt":"","text":"importScripts('https://unpkg.com/workbox-cdn@5.1.3/workbox/workbox-sw.js'); workbox.setConfig({ modulePathPrefix: 'https://unpkg.com/workbox-cdn@5.1.3/workbox/' }); const { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox; const { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies; const { ExpirationPlugin } = expiration; const { CacheableResponsePlugin } = cacheableResponse; const cacheSuffixVersion = '-000050', // 缓存版本号 极端重要，修改静态文件后发布网页一定要修改缓存版本号 maxEntries = 100; self.addEventListener('activate', (event) => { event.waitUntil( caches.keys().then((keys) => { return Promise.all(keys.map((key) => { if (!key.includes(cacheSuffixVersion)) return caches.delete(key); })); }) ); }); core.setCacheNameDetails({ prefix: 'volantis', // 极端重要 自己拟定一个名字 suffix: cacheSuffixVersion }); core.skipWaiting(); core.clientsClaim(); precaching.cleanupOutdatedCaches(); /* * Precache * - Static Assets */ precaching.precacheAndRoute( // 极端重要 定义首次缓存的静态文件 如果开启CDN需要修改为CDN链接 [ { url: '/css/first.css', revision: null }, { url: '/css/style.css', revision: null }, { url: '/js/app.js', revision: null }, ], ); /* * Cache File From CDN * * Method: CacheFirst * cacheName: static-immutable * cacheTime: 30d */ // cdn.jsdelivr.net - cors enabled routing.registerRoute( /.*cdn\\.jsdelivr\\.net/, new CacheFirst({ cacheName: 'static-immutable' + cacheSuffixVersion, fetchOptions: { mode: 'cors', credentials: 'omit' }, plugins: [ new ExpirationPlugin({ maxAgeSeconds: 30 * 24 * 60 * 60, purgeOnQuotaError: true }) ] }) ); // m7.music.126.net - cors enabled routing.registerRoute( /.*m7\\.music\\.126\\.net/, new CacheFirst({ cacheName: 'static-immutable' + cacheSuffixVersion, fetchOptions: { mode: 'cors', credentials: 'omit' }, plugins: [ new ExpirationPlugin({ maxAgeSeconds: 30 * 24 * 60 * 60, purgeOnQuotaError: true }) ] }) ); /* * No Cache * * Method: networkOnly */ routing.registerRoute( /.*baidu\\.com.*/, new NetworkOnly() ); /* * Others img fonts * Method: staleWhileRevalidate */ routing.registerRoute( // Cache image fonts files /.*\\.(?:png|jpg|jpeg|svg|gif|webp|ico|eot|ttf|woff|woff2|mp3)/, new StaleWhileRevalidate() ); /* * Static Assets * Method: staleWhileRevalidate */ routing.registerRoute( // Cache CSS files /.*\\.(css|js)/, // Use cache but update in the background ASAP new StaleWhileRevalidate() ); /* * sw.js - Revalidate every time * staleWhileRevalidate */ routing.registerRoute( '/sw.js', // 本文件名 new StaleWhileRevalidate() ); /* * Default - Serve as it is * networkFirst */ routing.setDefaultHandler( new NetworkFirst({ networkTimeoutSeconds: 3 }) );"},{"title":"","date":"2022-10-23T15:02:12.204Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"about/index.html","permalink":"https://nanaeo.cn/about/index.html","excerpt":"","text":"Hi, I’m Mlikiowa!是一位正在创作与做出改变的大学生，正在思考着知识与生活，并且为此刻而庆幸着… ExpPrevious Win7仍然风光依旧在此,我陷入折腾台式机器组装与装机之中,Diskgenius Ghost ImageFile Boot 是此时主题曲. 2015 在那个Win10萌芽的时代,此时我遇见CoolQ (一款用于提供Tencent QQ 聊天机器人服务的软件),因为想实现自己的机器人于是我从用户首次转向开发者,使用EPL开发CoolQ Plugins也是非常的方便,也是这时因为自己写的东西而努力前进着。 2016 时间过去一年,我知道我不会一直待在这个圈子里面,于是很快我直接脱离了Plugins的开发,开始开发桌面软件,并尝试着运营,结果是必然失败的,年纪 经济 技术都在限制着发挥。 2017 在这个年份,基于TencentQQ 和 Http1.1的协议研究,对我影响巨大,借此契机我学习了大量前端知识(IE tester甚至还可以运行),贴吧火热的年代总是牛人出没,因此我同年参与大型IM设计,负责部分协议的完成。 2018 前端知识基础之上缺少web开发使我迫切的接触了PHP,同时补习了CPP开发经验，并开发桌面动态壁纸项目等较成熟项目 2019 在初中毕业前的学习到此为止,我那一年开始写博客,并且了解WEB渗透知识 2020 高中忙忙碌碌的自己,完成了某网站的项目,Linux开始频繁出现在我的眼前这一年对图形编程有所提高,审美提高,但是核心技术部分未有较大突破。 2021 这年因高中学业为主,是站长的生活而非一个有理想的开发者,severless等新技术出现在眼前告诉着我众多新技术诞生,我开始尝试各种新技术新方案巨大的收获是开始活跃于开源平台. 2022 此处为高中毕业有感 高中已然结束,时间真是一件恐怖的事，恍然间我已经到了19岁(人生短短 大学之后就20多),我与simplx(我的一位朋友)认识6年(在2015-2022之中计算)之间名字从未改变，毕业之时再次联系时，那一年的某年某天的奇幻感觉再次出现，可惜已经是少有人与我回忆着曾经的故事，交流之中我说我曾经因为第一次被评论而喜悦因为用户支持而高兴，也许是我成熟了，我现在不能感受到，曾经年少的一句你好一张滑稽的表情的交友不再出现，我也发现我将编程从爱好变成了一件不再热爱用来消遣时间的事，各种因兴趣组成的群体，生活与社会开始铺开在我和他们面前，人是会麻木痛苦的，也许我未来的工作与这方面有关，但我真的热爱到疯狂吗?曾经的我也许可以说是，现在明确来讲并不，厌倦已经诞生，并且桌面开发用户群受众是小于手机应用开发的，如此未来尚不明朗，编程真的对于我来讲重要吗?此刻孤寂与痛苦早已大于快乐了。 不过无论如何已在路上，怎有路途中下车之理，期望着与志同道合的朋友遇见(9.25)"},{"title":"所有分类","date":"2022-10-23T15:02:12.204Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"categories/index.html","permalink":"https://nanaeo.cn/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-10-23T15:02:12.204Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"friends/index.html","permalink":"https://nanaeo.cn/friends/index.html","excerpt":"My Friends","text":"My Friends MySite 12345Name:Mlikiowa Home Villagedescription:A litter Village With MlikiowaUrl:https://nanaeo.cn/avatar(100x100):https://q1.qlogo.cn/g?b=qq&amp;nk=1627126029&amp;s=100siteshot:"},{"title":"所有标签","date":"2022-10-23T15:02:12.204Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"tags/index.html","permalink":"https://nanaeo.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"友情链接自动化实现","slug":"FriendAuto","date":"2022-10-21T16:00:00.000Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"2022/10/21/FriendAuto/","link":"","permalink":"https://nanaeo.cn/2022/10/21/FriendAuto/","excerpt":"友情链接太多管理和审查实在是太麻烦了，有没有那种比较懒的方案?","text":"友情链接太多管理和审查实在是太麻烦了，有没有那种比较懒的方案? 开端Mlikiowa一向认为懒是驱动生产力进步的力量之一，博客的友情链接管理对于我来说真的是太麻烦了。直到我遇见咱的有些朋友的友情使用github仓库的issue pr收集数据，等再通过workflow生成友情页面。显然和我想要的很接近了，但是有很大的缺点就是不标准，兼容各个主题要进行代码层面修改实在是太不方便了，同时这个的实现并没有做到全程自动化，基本必须使用进行人工审核，很明显不符合我对未来生活的想象，一种标准的 高扩展的 基于Github+Python友情链接管理系统就在这种推动生成力的情况下诞生了(目前还在开发中) 核心理念系统整体使用插件式运行，插件主动暴露自定义事件和绑定需要事件","categories":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/categories/SiteLog/"}],"tags":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/tags/SiteLog/"},{"name":"HexoThemes","slug":"HexoThemes","permalink":"https://nanaeo.cn/tags/HexoThemes/"},{"name":"Hexo","slug":"Hexo","permalink":"https://nanaeo.cn/tags/Hexo/"}]},{"title":"快速理解Py装饰器","slug":"PythonDecorator","date":"2022-08-17T16:00:00.000Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"2022/08/17/PythonDecorator/","link":"","permalink":"https://nanaeo.cn/2022/08/17/PythonDecorator/","excerpt":"一文理解Python装饰器","text":"一文理解Python装饰器 本文提示文章来自学习笔记,目前本文仍然在排版中 概念快解装饰器模式这是一种设计模式，它允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 Python的装饰器Python中的装饰器类似，在现有功能上进行添加功能并且不改变原代码结构。 前言故事最近在学习Python看到方法前面一行@开头代码(如下)很好奇 123@testdef demo() ... 查阅资料后发现其实这是Python装饰器，类似的设计模式称为装饰器模式。 一切皆是对象先别急，我们先理解一个概念，我们在Python可以将一切东西理解为对象，就像Linux一切皆文件的思想。甚至是一个函数其实也是对象 1234567def b(): print(&quot;hi&quot;)a = bb()a()# 结果毫无疑问是两个hi a与b同时将指向同一个函数对象# a() b() 产生的结果固然一样 那么根据以上我们可以知道函数也是可以作为参数进行传递Python中的一切(是的，甚至是类)都是对象。 我们定义的名称只是绑定到这些对象的标识符。 函数也不例外，它们也是对象(带有属性)。 将函数作为参数1234567891011def a1(x): return x + 5def b1(x): return x - 5def operate(func, x): result = func(x) return resultoperate(a1,5)operate(b1,5) 结果是10和0相信熟悉PHP同学感觉很熟悉了，有类似的感觉了，该函数是一个高阶函数(将其他函数作为参数的函数也称为高阶函数) 尝试在函数返回另一个函数1234567def hi(): def ret_p(): print(&quot;HelloWorld&quot;) return ret_p # 返回ret_p函数对象ret_f = hi() # 获取ret_p函数对象ret_f() # 执行ret_p函数 结果输出HelloWorld，那么这些都是非常简单的，就像新手入门一样。 回归装饰器细细观察以下代码 123456789def a(func): def inner(): print(&quot;decorated&quot;) func() return innerdef b(): print(&quot;function&quot;)b() 我们发现这段代码这里输出结果是 function但是我们稍加修改就会实现特殊功能 12345678910def a(func): def inner(): print(&quot;decorated&quot;) func() return innerdef b(): print(&quot;function&quot;)c = a(b)c() 这样你就会发现结果是decorated和function，b函数的结果并没有进行任何修改我们就实现了对功能增加那么我们还可以稍加优化，去掉c直接将修饰好的函数覆盖原来的函数 12345678910def a(func): def inner(): print(&quot;decorated&quot;) func() return innerdef b(): print(&quot;function&quot;)b = a(b)b() 我们可以发现如果将最后一行c改成b你就发现原b函数的功能被增加了，并且覆盖原功能了，这就Python基础修饰器但是这和@那行实现的装饰器有什么区别呢，其实以下代码等价于以上代码 123456789def a(func): def inner(): print(&quot;decorated&quot;) func() return inner@adef b(): print(&quot;function&quot;)b() 那么@a的功能代替了原本b = a(b)，对函数进行修饰。那么这样我们就完成了一个最基本的修饰器 参数装饰函数待补充待排版实际上，只要这个对象使用特殊方法实现了__call__()，那么这个对象就是可以被可调用。","categories":[{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/categories/DevLog/"}],"tags":[{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/tags/DevLog/"},{"name":"Python","slug":"Python","permalink":"https://nanaeo.cn/tags/Python/"}]},{"title":"高斯滤波","slug":"GaussWave","date":"2022-08-13T16:00:00.000Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"2022/08/13/GaussWave/","link":"","permalink":"https://nanaeo.cn/2022/08/13/GaussWave/","excerpt":"高斯滤波的实现","text":"高斯滤波的实现 本文提示本文仍然在编辑&#x2F;排版中本文提供了相关代码和算法仅为示例学习，并非标准案例，并且OpenCV提供了高斯滤波函数，如果遇到不明白的概念和地方可以参考引用文章理解，也可以尝试在搜索引擎上搜索相关概念和图片示例，由于本站资源原因，暂不提供图片。 tips: 本文为了方便仅是灰度图片处理如果需要彩色图片应该尝试修改代码三种通道进行分别处理或其它方法。 概念理解(部分来自百科等)滤波滤波就对图像像素点及其邻域点的灰度值按照一定的参数规则进行加权平均，可以有效滤去理想图像中叠加的高频噪声。常用的滤波有线性滤波、中值滤波、均值滤波、双边滤波、高斯滤波等。滤波有抑制噪声的作用，但这会使得图像边缘模糊。(摘自别的地方) 低通滤波低通滤波是一种过滤方式，规则为低频信号能正常通过，而超过设定临界值的高频信号则被阻隔、减弱，图像处理领域可用来模糊。 高通滤波高通滤波(high-pass filter) 是一种过滤方式，规则为高频信号能正常通过，而低于设定临界值的低频信号则被阻隔、减弱。但是阻隔、减弱的幅度则会依据不同的频率以及不同的滤波程序(目的)而改变，图像处理领域可用于锐化。 高斯滤波高斯滤波是一种线性平滑滤波，适用于消除高斯噪声，广泛应用于图像处理的减噪过程，对处理呈现正态分布(高斯分布)的噪声(包括图像噪声)效果显著。tips: 常用高斯模糊就是使用高斯滤波完成的， 高斯模糊是低通滤波的一种， 也就是滤波函数是低通高斯函数， 但是高斯滤波是指用高斯函数作为滤波函数， 至于是不是模糊，要看是高斯低通还是高斯高通， 低通就是模糊， 高通就是锐化。 核算子、模板、结构都是一种当我们进行图像处理时时，使用到的权用一个矩阵表示，可以利用该矩阵计算对应像素，同时我们叫这个矩阵为核算子、模板、结构。(示例见前提指明)大小可小可大，并且一般为奇数，Que:核大小为什么是都是类似3×3&#x2F;5×5 奇数呢?其中一个原因是定位中心锚点，偶数是无法确定中心点的。 滤波核当进行滤波时，里面是核的内容是权重并且可以用于处理像素，那么该核称为滤波核。(通俗解释 专业解释 请查询资料) 归一化就是生成核或者说模板加起来的权不为一，这时候我们核内每一个值除以核内总值，就实现了归一化。 卷积核如果一个核被用于卷积那么该核也可以被称为卷积核。(通俗解释 专业解释 请查询资料) 高斯核那么高斯核固然就是高斯分布生成的核了 环境与依赖Python 本次使用的编程语言OpenCV 跨平台计算机视觉库Windows11 本文中代码运行系统 OpenCv库安装(清华源 可自行切换) 12pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-pythonpip install opencv-contrib-python -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-python 举例最终滤波核示例 (提示:权请保证和为1 此处已经归一化 但并非真实情况)0.1 0.1 0.20.1 0.1 0.10.1 0.1 0.1 为3×3网格坐标结构该模板大小 3×3 算法过程高斯滤波实现方法看完以上相信各位并没有很多理解，并不要紧，联系实际我们进一步进行高斯滤波通常情况下有两种实现方式，一是用离散化窗口滑窗卷积， 另一种通过傅里叶变换，其中第一种毕竟常见，可能这时候有人又问了，这又是什么，别急，咱先慢慢来，离散化窗口滑窗卷积其实就是进行有限次的移动核运算区域的卷积运算，那么我们可以开始了。 算法过程0.图像灰度处理 (为了方便) 生成滤波核 进行卷积处理图像 生成滤波核(此处为一维高斯函数) sigma 为标准差 图像平滑程度取决于该值我们使用高斯函数进行生成对应滤波核离中心点越远那么边缘值的权值越小，我们依照高斯二维函数就可以生成对应滤波核。代码具体参考如下 123456789def GaussKernel(size,k,sigma): _t = np.zeros((size,size),np.float32) for i in range (size): for j in range (size): norm = math.pow(i-k,2) + pow(j-k,2) _t[i,j] = math.exp(-norm/(2*math.pow(sigma,2)))/2*math.pi*pow(sigma,2) sum = np.sum(_t) kernel = _t/sum return kernel 卷积生成然后我们使用对应的滤波权值进行乘以像素值，就可以生成新值，但是滤波核仅3×3大小，我们在原图像每一个像素点运算一次，即可生成新的图形。运算为: 每个像素点周围点 权×值 的和为中心点新值。 1234567891011def mygaussFilter(img_gray,kernel): h,w = img_gray.shape k_h,k_w = kernel.shape for i in range(int(k_h/2),h-int(k_h/2)): for j in range(int(k_h/2),w-int(k_h/2)): sum = 0 for k in range(0,k_h): for l in range(0,k_h): sum += img_gray[i-int(k_h/2)+k,j-int(k_h/2)+l]*kernel[k,l] img_gray[i,j] = sum return img_gray 样例代码1234567891011121314151617181920212223242526272829303132333435363738394041import mathimport cv2import numpy as npdef GaussKernel(size,k,sigma): _t = np.zeros((size,size),np.float32) for i in range (size): for j in range (size): norm = math.pow(i-k,2) + pow(j-k,2) _t[i,j] = math.exp(-norm/(2*math.pow(sigma,2)))/2*math.pi*pow(sigma,2) sum = np.sum(_t) kernel = _t/sum return kerneldef mygaussFilter(img_gray,kernel): h,w = img_gray.shape k_h,k_w = kernel.shape for i in range(int(k_h/2),h-int(k_h/2)): for j in range(int(k_h/2),w-int(k_h/2)): sum = 0 for k in range(0,k_h): for l in range(0,k_h): sum += img_gray[i-int(k_h/2)+k,j-int(k_h/2)+l]*kernel[k,l] img_gray[i,j] = sum return img_grayif __name__ == &#x27;__main__&#x27;: img = cv2.imread(&quot;demo.jpg&quot;) img_gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) img_g = img_gray.copy() k=1 size = 2*k+1 kernel = gausskernel(size,k,1.5) print(kernel) img_B,img_G,img_R = cv2.split(img) img_gauss_B = mygaussFilter(img_B,kernel) img_gauss_G = mygaussFilter(img_G,kernel) img_gauss_R = mygaussFilter(img_R,kernel) img_gauss = cv2.merge([img_gauss_B,img_gauss_G,img_gauss_R]) img_comp = np.hstack((img,img_gauss)) cv2.imshow(&quot;gauss&quot;,img_comp) cv2.waitKey(0) 直接OpenCV操作(非原理实现方案 使用封装方法)1234567import cv2Gn=cv2.imread(&quot;Gaussian_noise.jpg&quot;) Gf=cv2.GaussianBlur(Gn,(3,3),0,0)cv2.imshow(&quot;噪声图像&quot;,Gn)cv2.imshow(&quot;滤波图像&quot;,Gf)cv2.waitKey()cv2.destroyAllWindows() Que: 边界点的处理如果一个点处于边界，周边没有足够的点，怎么办？一个变通方法，就是把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。当然我们这里很简单，就是进行矩阵补零上去，用零进行模拟完整矩阵。 总结高斯滤波可以让图像高斯噪声降低，并且平滑图像，并且opencv等库已经提供封装，我们可以很快的使用 文章引用高斯滤波https://blog.csdn.net/weixin_51571728/article/details/121527964高斯滤波核https://blog.csdn.net/qqq777_/article/details/112800310有关线性滤波、滤波核的基本概念(概念理解)https://blog.csdn.net/weixin_42664622/article/details/103672899数字图像处理基础 — 高斯滤波https://zhuanlan.zhihu.com/p/82569305图像滤波原理(不推荐)https://view.inews.qq.com/a/20220425A06HHF00 提示该文章并不准确，如果有错误请积极指出。","categories":[{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/categories/DevLog/"}],"tags":[{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/tags/DevLog/"},{"name":"Gauss","slug":"Gauss","permalink":"https://nanaeo.cn/tags/Gauss/"}]},{"title":"新博客建好啦","slug":"NewBlog","date":"2022-08-04T16:00:00.000Z","updated":"2022-10-23T15:02:12.204Z","comments":true,"path":"2022/08/04/NewBlog/","link":"","permalink":"https://nanaeo.cn/2022/08/04/NewBlog/","excerpt":"Hi Hexo,I am Mlikiowa!是全新的Hexo&#x2F;vlolantis博客,我又回来写博客了!","text":"Hi Hexo,I am Mlikiowa!是全新的Hexo&#x2F;vlolantis博客,我又回来写博客了! 回忆2019.Previous 使用过Emlog Wordpress来搭建博客，使用过各种博客系统，体验不能说差，只能说没有。 2019.Done 开始尝试在CSDN 简书平台发布自己的文章，但是后来因为咱不太喜欢平台限制，遂转入Typecho来搭建博客。 2020.Done 一开始typecho小而美的感觉是很不错的体验，加上我正好会使用PHP，能自己搓插件，所以体验还不错。 2021.Done 期间域名备案和准备高考，并搭建了一个运行在国内的typecho博客。 2022.Done 上半年:因为没有空闲时间打理博客，备案因无法联系注销，后来意外将电脑中typecho的备份删除，故跑路。下半年:借大佬之手找回了数据，但准备重新开始，于是依靠Hexo搭建了全新的博客，走上了白嫖之路。 事件前言: 各位好啊，以上就是我的悲剧经历了，现在我又新搭了博客，使用Hexo博客来进行搭建，依托serverless和action等工具实现。 备案悲剧: 之前我一直使用typecho，服务器和域名在国内备案，高中学业繁忙，每天都忙着学习。所以个人就没有时间处理相关的事情，审核电话我也没有接到，导致国内备案掉了，加上本来博文写的就不怎么样，后来干脆就直接删掉跑路了，虽然后面通过大佬进行找回了，我也是决定从头开始了。 计划上线: 直到2022年的下半年毕业，我终于想起时修理博客，却又嫌折腾博客麻烦，国内备案审核挺烦。本来是计划在另一位大佬那里使用Typecho搭建博客，因为typecho某些地方有些实在是难受，导致我实在是忍受不了痛苦了(恼，于是很快决定更换博客系统。 实际行动: 于是我决定博客使用hexo搭建，并且以低成本实现搭个稳定的博客，本博客是非常容易在新设备上使用，轻松可以在新的地方迁移使用，将跑路可能性降到最低了。 博客运行环境 Name Content Blog Hexo Theme volantis platform vercel＆Github domain nanaeo.cn 小吐槽: 之前还想试试hexo-theme-diaspora这样的主题，这款博客是从wp移植到hexo的，介绍图很好看，可惜作者没更新了，于是我只能选择其它主题了。所以我换成了volantis主题 (npm -i hexo-theme-volantis 可以轻松安装)，个人感觉色调和布局都很好看，可玩程度很高。 博客搭建本博客源码项目https://github.com/MliKiowa/MliKiowa.github.io 本博客通过使用GithubAction等方式生成部署分发博文到如githubpage vercel等服务商至于推送到cos/oss .etc storage bucket还是算了，毕竟谁用谁欠费(容易挨打，好点情况也得宕了)。 小提示: 使用多服务商涉及到Dns分流，像腾讯Dnspod的这种解析服务要交钱升级才能使用，非常的难受，所以我考虑使用动态Api进行切换dns解析。 小吐槽: 居然github workflow只有已经写好的deploy hugo site to githubpage workflow，没有hexo自动部署的脚步，于是我照猫画虎写了一个Hexo自动部署脚本，但因水平太菜，用这个workflow还得我改了半天。正当我吐槽这么大个github没人发布自动部署脚本的时候，我在github search找到了类似的workflow，但是我已经写完了，难受。 迁移使用 本博客通过以下脚本可以快速迁移，从云端Github下载源码然后在本地进行编写博文,提交后直接在使用action刷新博客。 Tips: 如果你有需要也可以执行以下脚本建立新博客，可以轻松在新设备上运行。 bash.sh 1234git clone https://github.com/MliKiowa/MliKiowa.github.iocd MliKiowa.github.ionpm installhexo g 博客内容 Classification Content Dev Exp Free Developer Site Log Site Maintenance Log Life Log Record your life 小提示: 内容的主要以编程和生活为主，不会有资源推荐，也不接受类似站点友链。 期盼 域名问题: 原来的域名看起来好憨，还被我朋友嘲笑了，因此旧域名怎么能配得上新博客，所以我还是注册个符合气质的新域名啊，所以nanaeo.cn诞生了，寓意没有很特别，全凭感觉来，可爱就对了不是嘛(歪头 跑路问题: 折腾数次各种博客的我真的是太累了，所以本博客能run起来我觉得不是不会去折腾什么新博客了，但是请允许我说一句，我正在努力成为年更博主吧，半年一更就是高产! 内容布局: 咱正在正在摸索，你现在看到的排版全是我正在尝试的，我很少使用Hexo，可以说是全新的萌新，但是让我来慢慢完善应该没有任何问题。 图床问题: 这个问题我根本不知道怎么解决我还是摆烂吧，博文能不放图我绝对不会放图出来。 总结一下: 这就是Mlikiowa全新的博客了，Always believe that something wonderful is about to happen.Let’s go!","categories":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/categories/SiteLog/"}],"tags":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/tags/SiteLog/"},{"name":"HexoThemes","slug":"HexoThemes","permalink":"https://nanaeo.cn/tags/HexoThemes/"},{"name":"Hexo","slug":"Hexo","permalink":"https://nanaeo.cn/tags/Hexo/"}]}],"categories":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/categories/SiteLog/"},{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/categories/DevLog/"}],"tags":[{"name":"SiteLog","slug":"SiteLog","permalink":"https://nanaeo.cn/tags/SiteLog/"},{"name":"HexoThemes","slug":"HexoThemes","permalink":"https://nanaeo.cn/tags/HexoThemes/"},{"name":"Hexo","slug":"Hexo","permalink":"https://nanaeo.cn/tags/Hexo/"},{"name":"DevLog","slug":"DevLog","permalink":"https://nanaeo.cn/tags/DevLog/"},{"name":"Python","slug":"Python","permalink":"https://nanaeo.cn/tags/Python/"},{"name":"Gauss","slug":"Gauss","permalink":"https://nanaeo.cn/tags/Gauss/"}]}